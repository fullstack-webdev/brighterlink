files:
    "/opt/elasticbeanstalk/hooks/appdeploy/enact/00run.sh":
      mode: "000755"
      owner: root
      group: root
      encoding: plain
      content: |
        #!/bin/bash
        # Author : Samar Acharya
        # Overrides default run.sh on eb with 1.7 docker
        
        . /opt/elasticbeanstalk/hooks/common.sh
        
        EB_CONFIG_APP_CURRENT=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)
        EB_CONFIG_DOCKER_LOG_HOST_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k host_log_dir)
        EB_CONFIG_DOCKER_STAGING_APP_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k app_staging_file)
        EB_CONFIG_DOCKER_PORT_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k port_file)
        EB_CONFIG_DOCKER_IMAGE_STAGING=$(/opt/elasticbeanstalk/bin/get-config container -k staging_image)
        EB_SUPPORT_FILES=$(/opt/elasticbeanstalk/bin/get-config container -k support_files_dir)
        
        # verify Dockerfile
        # currently we require Dockerfile to expose exactly one port
        
        EB_CONFIG_DOCKER_PORT=`cat $EB_CONFIG_APP_CURRENT/Dockerfile | grep -i ^EXPOSE | awk '{print $2}' | sed $'s/\r//'`
        
        if [ -z "$EB_CONFIG_DOCKER_PORT" ]; then
            error_exit "No EXPOSE directive found in Dockerfile, abort deployment" 1
        fi
        
        if [ `echo $EB_CONFIG_DOCKER_PORT | wc -w` -gt 1 ]; then
            EB_CONFIG_DOCKER_PORT=`echo $EB_CONFIG_DOCKER_PORT | awk '{print $1}'`
            warn "Only one EXPOSE directive is allowed, using the first one: $EB_CONFIG_DOCKER_PORT"
        fi
        
        # Dockerrun.aws.json can override settings in Dockerfile
        
        if [ -f $EB_CONFIG_APP_CURRENT/Dockerrun.aws.json ]; then
            EB_CONFIG_DOCKER_LOG_CONTAINER_DIR=`cat $EB_CONFIG_APP_CURRENT/Dockerrun.aws.json | jq -r .Logging`
        
            # get volume mounting points from Dockerrun.aws.json
            # this cannot be specified in Dockerfile since the host dir is host specific
            EB_CONFIG_DOCKER_VOLUME_MOUNTS=()
        
            while read -r VOLUME; do
                EB_CONFIG_DOCKER_VOLUME_MOUNTS+=(-v "$VOLUME")
            done < <(cat $EB_CONFIG_APP_CURRENT/Dockerrun.aws.json | jq -c '.Volumes[] | [.HostDirectory, .ContainerDirectory]' | sed -e 's/[]["]//g' -e 's/,/:/g')
        fi
        
        # mount the logs dir
        
        if [ -n "$EB_CONFIG_DOCKER_LOG_CONTAINER_DIR" ] && [ "$EB_CONFIG_DOCKER_LOG_CONTAINER_DIR" != "null" ]; then
            EB_CONFIG_DOCKER_VOLUME_MOUNTS+=(-v "$EB_CONFIG_DOCKER_LOG_HOST_DIR:$EB_CONFIG_DOCKER_LOG_CONTAINER_DIR")
        fi
        
        # build --env arguments for docker from env var settings
        
        EB_CONFIG_DOCKER_ENV_ARGS=()
        
        while read -r ENV_VAR; do
            EB_CONFIG_DOCKER_ENV_ARGS+=(--env "$ENV_VAR")
        done < <($EB_SUPPORT_FILES/generate_env)
        
        # port mapping
        
        echo $EB_CONFIG_DOCKER_PORT > $EB_CONFIG_DOCKER_PORT_FILE
        
        # Command and Entrypoint
        # ALL KINDS OF BASH CHARACTER ESCAPING MAGIC, DO NOT ATTEMPT TO EDIT
        
        eval EB_CONFIG_DOCKER_COMMAND_ARGS=(`cat $EB_CONFIG_APP_CURRENT/Dockerrun.aws.json | jq -r .Command`)
        [ "$EB_CONFIG_DOCKER_COMMAND_ARGS" = "null" ] && EB_CONFIG_DOCKER_COMMAND_ARGS=()
        
        EB_CONFIG_DOCKER_ENTRYPOINT=`cat $EB_CONFIG_APP_CURRENT/Dockerrun.aws.json | jq -r .Entrypoint`
        [ "$EB_CONFIG_DOCKER_ENTRYPOINT" = "null" ] && EB_CONFIG_DOCKER_ENTRYPOINT=
        [ -n "$EB_CONFIG_DOCKER_ENTRYPOINT" ] && EB_CONFIG_DOCKER_ENTRYPOINT_ARGS=(--entrypoint "$EB_CONFIG_DOCKER_ENTRYPOINT")
        
        # fix for multi port expose
        # get number of CPU
        NUM_OF_CPU=$(getconf _NPROCESSORS_ONLN)
        PORT_START=$(/opt/elasticbeanstalk/containerfiles/support/generate_env | grep ^PORT | cut -d "=" -f2 || echo 3000)
        PORT_END=$(($PORT_START+$NUM_OF_CPU))
        PORT_START=$(($PORT_START+1)) #assumes first port is in expose
        PORT_ARGS=()
        for ((i = $PORT_START; i < $PORT_END; i++)); do
            PORT_ARGS+=(-p $i:$i)
        done
        
        # stop any running container
        docker ps -a | grep "ago.*Up" | cut -d" " -f1 | xargs --no-run-if-empty docker stop
        docker ps -a | grep Exited | cut -d" " -f1 | xargs --no-run-if-empty docker rm
        # run the container
        
        docker run -d \
                   "${EB_CONFIG_DOCKER_ENV_ARGS[@]}" \
                   "${EB_CONFIG_DOCKER_VOLUME_MOUNTS[@]}" \
                   "${EB_CONFIG_DOCKER_ENTRYPOINT_ARGS[@]}" \
                   "${PORT_ARGS[@]}" \
                   $EB_CONFIG_DOCKER_IMAGE_STAGING \
                   "${EB_CONFIG_DOCKER_COMMAND_ARGS[@]}" 2>&1 | tee /tmp/docker_run.log | tee $EB_CONFIG_DOCKER_STAGING_APP_FILE
        
        DOCKER_RUN_EXIT_CODE=${PIPESTATUS[0]}
        if [ $DOCKER_RUN_EXIT_CODE -ne 0 ]; then
            LOG_TAIL=`cat /tmp/docker_run.log | tail -c 200`
            error_exit "Failed to run Docker container: $LOG_TAIL. Check snapshot logs for details." $DOCKER_RUN_EXIT_CODE
        fi
        
        # wait for 5 seconds then check if container is still up
        
        sleep 5
        
        EB_CONFIG_DOCKER_STAGING_APP=`cat $EB_CONFIG_DOCKER_STAGING_APP_FILE | cut -c 1-12`
        if ! docker ps | grep -q $EB_CONFIG_DOCKER_STAGING_APP; then
            LOG_FILE=$EB_CONFIG_DOCKER_LOG_HOST_DIR/unexpected-quit.log
        
            echo "Docker container quit unexpectedly on `date`:" > $LOG_FILE
            docker logs $EB_CONFIG_DOCKER_STAGING_APP >> $LOG_FILE 2>&1
            LOG_TAIL=`cat $LOG_FILE | tail -c 200`
        
            error_exit "Docker container quit unexpectedly after launch: $LOG_TAIL. Check snapshot logs for details." 1
        fi
